---
name: Deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., development, production, staging)"
        required: true
        type: string
        default: ""
      region:
        description: "GCP region"
        required: false
        type: string
        default: "us-central1"
      image_tag:
        description: "Docker image tag (latest or the commit SHA)"
        required: false
        type: string
        default: "latest"

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  format-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Format check
        run: terraform fmt -check

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env || 'development' }}
    needs: format-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          ENV_NAME="${{ inputs.env }}"
          REGION="${{ inputs.region || 'us-central1' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV

          # Set project name and terraform bucket based on environment
          if [ "$ENV_NAME" = "production" ]; then
            echo "PROJECT_NAME=arxiv-production" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=arxiv-production" >> $GITHUB_ENV
          elif [ "$ENV_NAME" = "development" ]; then
            echo "PROJECT_NAME=arxiv-development" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=arxiv-development" >> $GITHUB_ENV
          else
            # For custom environments, use the environment name as project name
            echo "PROJECT_NAME=$ENV_NAME" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=$ENV_NAME" >> $GITHUB_ENV
            echo "Custom environment detected, using $ENV_NAME as project name"
          fi

      - name: Authenticate to Google Cloud (Initial)
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_NAME }}

      - name: Set workload identity values
        run: |
          ENV_NAME="${{ inputs.env }}"
          PROJECT_NAME="${{ env.PROJECT_NAME }}"
          
          echo "Looking up workload identity values for project: $PROJECT_NAME"
          
          # Get the project number dynamically
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_NAME" --format="value(projectNumber)" 2>/dev/null)
          
          if [ -z "$PROJECT_NUMBER" ]; then
            echo "❌ Could not get project number for: $PROJECT_NAME"
            echo "Make sure the project exists and you have access to it"
            exit 1
          fi
          
          echo "✅ Project number: $PROJECT_NUMBER"
          
          # Construct values based on the arxiv-env Terraform configuration naming patterns
          # The arxiv-env creates:
          # - Workload identity pool: "github" 
          # - Provider: "github-actions-provider"
          # - Service account: "github-actions-sa"
          
          PROVIDER_NAME="projects/${PROJECT_NUMBER}/locations/global/workloadIdentityPools/github/providers/github-actions-provider"
          SERVICE_ACCOUNT="github-actions-sa@${PROJECT_NAME}.iam.gserviceaccount.com"
          
          echo "✅ Constructed workload identity values:"
          echo "   Provider: $PROVIDER_NAME"
          echo "   Service Account: $SERVICE_ACCOUNT"
          
          # Set environment variables for the auth step
          echo "PROVIDER_NAME=$PROVIDER_NAME" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT=$SERVICE_ACCOUNT" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.PROVIDER_NAME }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_NAME }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Configure terraform
        run: |
          echo "provider \"google\" {" > provider_override.tf
          echo "  project = \"${{ env.PROJECT_NAME }}\"" >> provider_override.tf
          echo "  region  = \"${{ env.REGION }}\"" >> provider_override.tf
          echo "}" >> provider_override.tf
        working-directory: cicd/deploy

      - name: Initialize remote backend
        run: terraform init -backend-config="bucket=${{ env.TERRAFORM_BUCKET }}"
        working-directory: cicd/deploy

      - name: Plan
        run: |
          terraform plan \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="region=${{ env.REGION }}" \
            -var="commit_sha=${{ inputs.image_tag || github.sha }}"
        working-directory: cicd/deploy

      - name: Apply
        run: |
          terraform apply \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="region=${{ env.REGION }}" \
            -var="commit_sha=${{ inputs.image_tag || github.sha }}" \
            -auto-approve
        working-directory: cicd/deploy