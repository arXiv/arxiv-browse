---
name: Deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., development, production, staging)"
        required: true
        type: string
        default: ""
      region:
        description: "GCP region"
        required: false
        type: string
        default: "us-central1"
      image_tag:
        description: "Docker image tag (latest or the commit SHA)"
        required: false
        type: string
        default: "latest"

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  format-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Format check
        run: terraform fmt -check

  deploy:
    runs-on: ubuntu-latest
    needs: format-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          ENV_NAME="${{ inputs.env }}"
          REGION="${{ inputs.region || 'us-central1' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV

          # Set project name and terraform bucket based on environment
          if [ "$ENV_NAME" = "production" ]; then
            echo "PROJECT_NAME=arxiv-production" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=arxiv-production" >> $GITHUB_ENV
          elif [ "$ENV_NAME" = "development" ]; then
            echo "PROJECT_NAME=arxiv-development" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=arxiv-development" >> $GITHUB_ENV
          else
            # For custom environments, use the environment name as project name
            echo "PROJECT_NAME=$ENV_NAME" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=$ENV_NAME" >> $GITHUB_ENV
            echo "Custom environment detected, using $ENV_NAME as project name"
          fi

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Debug organization variables
        run: |
          echo "ARXIV_DEVELOPMENT_PROVIDER_NAME: ${{ vars.ARXIV_DEVELOPMENT_PROVIDER_NAME }}"
          echo "ARXIV_DEVELOPMENT_SERVICE_ACCOUNT: ${{ vars.ARXIV_DEVELOPMENT_SERVICE_ACCOUNT }}"

      - name: Authenticate with arxiv-development for bucket access
        uses: google-github-actions/auth@v3
        with:
          project_id: arxiv-development
          workload_identity_provider: ${{ vars.ARXIV_DEVELOPMENT_PROVIDER_NAME }}
          service_account: ${{ vars.ARXIV_DEVELOPMENT_SERVICE_ACCOUNT }}

      - name: Activate service account
        run: |
          # Debug: Check the credentials file
          echo "Credentials file path: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "Credentials file exists: $(ls -la $GOOGLE_APPLICATION_CREDENTIALS)"
          echo "First 200 chars of credentials file:"
          head -c 200 $GOOGLE_APPLICATION_CREDENTIALS
          echo ""
          echo "File type:"
          file $GOOGLE_APPLICATION_CREDENTIALS
          echo ""
          
          # Set the application default credentials
          export GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS
          
          # Try to authenticate with the credentials file
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS --project=arxiv-development

      - name: Fetch project-specific credentials from bucket
        run: |
          echo "Fetching project-specific credentials from bucket..."
          
          # Debug: Check current authentication
          echo "Current authentication:"
          gcloud auth list
          echo ""
          echo "Current project:"
          gcloud config get-value project
          echo ""
          echo "Testing bucket access:"
          gsutil ls gs://${{ env.PROJECT_NAME }}/
          echo ""
          
          # Download credentials from the project bucket using the authenticated arxiv-development service account
          gsutil cp gs://${{ env.PROJECT_NAME }}/github-credentials.json /tmp/github-credentials.json
          
          if [ -f /tmp/github-credentials.json ]; then
            echo "✅ Successfully downloaded credentials from bucket"
            
            # Parse and set environment variables
            PROVIDER_NAME=$(jq -r '.PROVIDER_NAME' /tmp/github-credentials.json)
            SERVICE_ACCOUNT=$(jq -r '.SERVICE_ACCOUNT' /tmp/github-credentials.json)
            
            echo "PROVIDER_NAME=$PROVIDER_NAME" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT=$SERVICE_ACCOUNT" >> $GITHUB_ENV
            
            echo "✅ Using project-specific credentials from bucket:"
            echo "  PROVIDER_NAME: $PROVIDER_NAME"
            echo "  SERVICE_ACCOUNT: $SERVICE_ACCOUNT"
          else
            echo "❌ Error: Failed to download credentials from bucket"
            echo ""
            echo "To set up credentials for this project:"
            echo "1. Create the project using: cd /path/to/arxiv-iac/arxiv-env && ./arxiv-env -project_name ${{ env.PROJECT_NAME }}"
            echo "2. Copy the PROVIDER_NAME and SERVICE_ACCOUNT values from the output"
            echo "3. Go to repository Settings → Secrets and variables → Actions"
            echo "4. Add PROVIDER_NAME and SERVICE_ACCOUNT as repository variables"
            echo ""
            echo "The arxiv-env script will automatically store credentials in the project bucket"
            echo "and grant the necessary permissions for automated deployment."
            exit 1
          fi

      - name: Re-authenticate with project-specific Workload Identity
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.PROVIDER_NAME }}
          service_account: ${{ env.SERVICE_ACCOUNT }}


      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Configure terraform
        run: |
          echo "provider \"google\" {" > provider_override.tf
          echo "  project = \"${{ env.PROJECT_NAME }}\"" >> provider_override.tf
          echo "  region  = \"${{ env.REGION }}\"" >> provider_override.tf
          echo "}" >> provider_override.tf
        working-directory: cicd/deploy

      - name: Initialize remote backend
        run: terraform init -backend-config="bucket=${{ env.TERRAFORM_BUCKET }}"
        working-directory: cicd/deploy

      - name: Plan
        run: |
          terraform plan \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="region=${{ env.REGION }}" \
            -var="commit_sha=${{ inputs.image_tag || github.sha }}"
        working-directory: cicd/deploy

      - name: Apply
        run: |
          terraform apply \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="region=${{ env.REGION }}" \
            -var="commit_sha=${{ inputs.image_tag || github.sha }}" \
            -auto-approve
        working-directory: cicd/deploy