---
name: Deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., development, production, staging)"
        required: true
        type: string
        default: ""
      region:
        description: "GCP region"
        required: false
        type: string
        default: "us-central1"
      image_tag:
        description: "Docker image tag (latest or the commit SHA)"
        required: false
        type: string
        default: "latest"

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  format-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Format check
        run: terraform fmt -check

  deploy:
    runs-on: ubuntu-latest
    needs: format-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          ENV_NAME="${{ inputs.env }}"
          REGION="${{ inputs.region || 'us-central1' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV

          # Set project name and terraform bucket based on environment
          if [ "$ENV_NAME" = "production" ]; then
            echo "PROJECT_NAME=arxiv-production" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=arxiv-production" >> $GITHUB_ENV
          elif [ "$ENV_NAME" = "development" ]; then
            echo "PROJECT_NAME=arxiv-development" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=arxiv-development" >> $GITHUB_ENV
          else
            # For custom environments, use the environment name as project name
            echo "PROJECT_NAME=$ENV_NAME" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=$ENV_NAME" >> $GITHUB_ENV
            echo "Custom environment detected, using $ENV_NAME as project name"
          fi

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Authenticate with arxiv-development for bucket access
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ vars.PROVIDER_NAME }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}
          project_id: arxiv-development

      - name: Fetch project-specific credentials from bucket
        run: |
          echo "Fetching project-specific credentials from bucket..."
          
          # Set the project context to the target project for bucket access
          gcloud config set project ${{ env.PROJECT_NAME }}
          
          # Download credentials from the project bucket
          if gsutil cp gs://${{ env.PROJECT_NAME }}/github-credentials.json /tmp/github-credentials.json; then
            echo "✅ Successfully downloaded credentials from gs://${{ env.PROJECT_NAME }}/github-credentials.json"
            
            # Extract PROVIDER_NAME and SERVICE_ACCOUNT from JSON
            PROVIDER_NAME=$(cat /tmp/github-credentials.json | jq -r '.PROVIDER_NAME')
            SERVICE_ACCOUNT=$(cat /tmp/github-credentials.json | jq -r '.SERVICE_ACCOUNT')
            
            if [ "$PROVIDER_NAME" != "null" ] && [ "$SERVICE_ACCOUNT" != "null" ]; then
              echo "PROVIDER_NAME=$PROVIDER_NAME" >> $GITHUB_ENV
              echo "SERVICE_ACCOUNT=$SERVICE_ACCOUNT" >> $GITHUB_ENV
              echo "✅ Project-specific credentials extracted successfully"
            else
              echo "❌ Error: Invalid credentials format in JSON file"
              exit 1
            fi
            
            # Clean up
            rm -f /tmp/github-credentials.json
          else
            echo "❌ Error: Failed to download credentials from gs://${{ env.PROJECT_NAME }}/github-credentials.json"
            echo "This might mean:"
            echo "1. The project was not created using arxiv-env script"
            echo "2. The credentials file doesn't exist in the bucket"
            echo "3. You don't have access to the project bucket"
            echo ""
            echo "Please ensure the project was created using the arxiv-env script"
            exit 1
          fi

      - name: Re-authenticate with project-specific service account
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.PROVIDER_NAME }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_NAME }}


      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Configure terraform
        run: |
          echo "provider \"google\" {" > provider_override.tf
          echo "  project = \"${{ env.PROJECT_NAME }}\"" >> provider_override.tf
          echo "  region  = \"${{ env.REGION }}\"" >> provider_override.tf
          echo "}" >> provider_override.tf
        working-directory: cicd/deploy

      - name: Initialize remote backend
        run: terraform init -backend-config="bucket=${{ env.TERRAFORM_BUCKET }}"
        working-directory: cicd/deploy

      - name: Plan
        run: |
          terraform plan \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="region=${{ env.REGION }}" \
            -var="commit_sha=${{ inputs.image_tag || github.sha }}"
        working-directory: cicd/deploy

      - name: Apply
        run: |
          terraform apply \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="region=${{ env.REGION }}" \
            -var="commit_sha=${{ inputs.image_tag || github.sha }}" \
            -auto-approve
        working-directory: cicd/deploy